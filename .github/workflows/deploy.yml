name: Deploy Production to VPS

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Upload Docker Compose file for deployment
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-prod
          path: docker-compose.prod.yml

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/crawler-http-service

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker Compose file
        uses: actions/download-artifact@v4
        with:
          name: docker-compose-prod

      - name: Create environment file
        run: |
          echo "TRAEFIK_HOST=${{ secrets.TRAEFIK_HOST }}" > .env.prod
          echo "TRAEFIK_ACME_EMAIL=${{ secrets.TRAEFIK_ACME_EMAIL }}" >> .env.prod
          echo "LISTEN_PORT=${{ secrets.LISTEN_PORT || '8080' }}" >> .env.prod
          echo "POSTGRES_DB_NAME=${{ secrets.POSTGRES_DB_NAME }}" >> .env.prod
          echo "POSTGRES_USERNAME=${{ secrets.POSTGRES_USERNAME }}" >> .env.prod
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT || '5432' }}" >> .env.prod
          echo "NATS_PORT=${{ secrets.NATS_PORT || '4222' }}" >> .env.prod
          echo "NATS_MONITORING_PORT=${{ secrets.NATS_PORT_MONITORING || '8222' }}" >> .env.prod
          echo "REDIS_PORT=${{ secrets.REDIS_PORT || '6379' }}" >> .env.prod
          echo "GCS_STORAGE_BUCKET=${{ secrets.GCS_STORAGE_BUCKET }}" >> .env.prod
          echo "IMAGE_TAG=${{ github.ref_name }}" >> .env.prod

      - name: Setup deployment directory on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            mkdir -p /srv/crawler-http-service

      - name: Copy deployment files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "docker-compose.prod.yml,.env.prod"
          target: "/srv/crawler-http-service"
          overwrite: true

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            cd /srv/crawler-http-service
            export $(grep -v '^#' .env.prod | xargs)
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo "Pulling latest image with tag: ${IMAGE_TAG}"
            docker-compose -f docker-compose.prod.yml pull app
            echo "Deploying stack..."
            docker stack deploy --compose-file docker-compose.prod.yml --with-registry-auth crawler_stack
            echo "Deployment successful."

