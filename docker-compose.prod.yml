version: "3.8"

services:
  nginx:
    image: "nginx:alpine"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - app
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: any

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro

  app:
    # The 'build' section is removed for stack deployment.
    # Instead, we specify the pre-built image from a registry.
    # IMPORTANT: Replace YOUR_GITHUB_USERNAME with your GitHub username or organization.
    image: ghcr.io/YOUR_GITHUB_USERNAME/crawler-http-service:latest
    # The app port is no longer exposed to the host.
    # ports:
    #   - ${LISTEN_PORT:-8080}:${LISTEN_PORT:-8080}
    depends_on:
      - postgres
      - nats
      - redis
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - NATS_HOST=nats
      - NATS_PORT=${NATS_PORT:-4222}
      - NATS_USER=${NATS_USER:-}
      - NATS_PASSWORD=${NATS_PASSWORD:-}
      - NATS_JETSTREAM_ENABLED=${NATS_JETSTREAM_ENABLED:-true}
      - NATS_PORT_MONITORING=${NATS_PORT_MONITORING:-8222}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - GCS_STORAGE_BUCKET=${GCS_STORAGE_BUCKET:-lexicon-bo-bucket}
      # The GCP credentials are now mounted as a Docker Secret.
      - GOOGLE_APPLICATION_CREDENTIALS=/run/secrets/gcp_credentials
    networks:
      - app-network
    secrets:
      - gcp_credentials
    deploy:
      restart_policy:
        condition: any

  postgres:
    image: "postgres:16.2"
    ports:
      - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}
    environment:
      # Passwords are now handled securely via Docker Secrets.
      POSTGRES_DATABASE: "${POSTGRES_DB_NAME}"
      POSTGRES_USER: "${POSTGRES_USERNAME}"
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - "app-postgres:/var/lib/postgresql/data"
    networks:
      - app-network
    secrets:
      - postgres_password
    deploy:
      restart_policy:
        condition: any

  nats:
    image: "nats:2.10-alpine"
    ports:
      - "${NATS_PORT:-4222}:4222" # Client connections
      - "${NATS_MONITORING_PORT:-8222}:8222" # HTTP monitoring
    command: "-js -m 8222 --jetstream ${NATS_ADDITIONAL_ARGS:-}"
    volumes:
      - "app-nats-data:/data"
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: any

  redis:
    image: "eqalpha/keydb:latest"
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - "app-redis:/data"
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: any

networks:
  app-network:
    driver: bridge

volumes:
  app-postgres:
    driver: local
  app-nats-data:
    driver: local
  app-redis:
    driver: local
  certbot-etc:
    driver: local
  certbot-var:
    driver: local

# Define the secrets, which are expected to exist in the Docker Swarm.
secrets:
  postgres_password:
    external: true
  gcp_credentials:
    external: true
