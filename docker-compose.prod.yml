version: "3.8"

services:
  traefik:
    image: "traefik:v3.0"
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik-letsencrypt:/letsencrypt"
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: any

  app:
    # The 'build' section is removed for stack deployment.
    # Instead, we specify the pre-built image from a registry.
    # IMPORTANT: Replace YOUR_GITHUB_USERNAME with your GitHub username or organization.
    image: ghcr.io/LexiconIndonesia/crawler-http-service:${IMAGE_TAG:-latest}
    # The app port is no longer exposed to the host.
    # ports:
    #   - ${LISTEN_PORT:-8080}:${LISTEN_PORT:-8080}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls.certresolver=myresolver"
      - "traefik.http.services.app.loadbalancer.server.port=${LISTEN_PORT:-8080}"
    depends_on:
      - postgres
      - nats
      - redis
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - NATS_HOST=nats
      - NATS_PORT=${NATS_PORT:-4222}
      - NATS_JETSTREAM_ENABLED=${NATS_JETSTREAM_ENABLED:-true}
      - NATS_PORT_MONITORING=${NATS_PORT_MONITORING:-8222}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - GCS_STORAGE_BUCKET=${GCS_STORAGE_BUCKET:-lexicon-bo-bucket}
      # The GCP credentials are now mounted as a Docker Secret.
      - GOOGLE_APPLICATION_CREDENTIALS=/run/secrets/gcp_credentials
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - NATS_USER_FILE=/run/secrets/nats_user
      - NATS_PASSWORD_FILE=/run/secrets/nats_password
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    networks:
      - app-network
    secrets:
      - gcp_credentials
      - postgres_password
      - nats_user
      - nats_password
      - redis_password
    deploy:
      restart_policy:
        condition: any

  postgres:
    image: "postgres:17.5-alpine"
    environment:
      # Passwords are now handled securely via Docker Secrets.
      POSTGRES_DATABASE: "${POSTGRES_DB_NAME}"
      POSTGRES_USER: "${POSTGRES_USERNAME}"
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - "app-postgres:/var/lib/postgresql/data"
    networks:
      - app-network
    secrets:
      - postgres_password
    deploy:
      restart_policy:
        condition: any

  nats:
    image: "nats:2.10-alpine"
    ports:
      - "${NATS_PORT:-4222}:4222" # Client connections
      - "${NATS_MONITORING_PORT:-8222}:8222" # HTTP monitoring
    command: >
      sh -c "nats-server -js -m 8222 --jetstream --user $$(cat /run/secrets/nats_user) --pass $$(cat /run/secrets/nats_password)"
    volumes:
      - "app-nats-data:/data"
    networks:
      - app-network
    secrets:
      - nats_user
      - nats_password
    deploy:
      restart_policy:
        condition: any

  redis:
    image: "eqalpha/keydb:latest"
    command: "keydb-server /etc/keydb/keydb.conf --requirepass-file /run/secrets/redis_password"
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - "app-redis:/data"
    networks:
      - app-network
    secrets:
      - redis_password
    deploy:
      restart_policy:
        condition: any

networks:
  app-network:
    driver: bridge

volumes:
  app-postgres:
    driver: local
  app-nats-data:
    driver: local
  app-redis:
    driver: local
  traefik-letsencrypt:
    driver: local

# Define the secrets, which are expected to exist in the Docker Swarm.
secrets:
  postgres_password:
    external: true
  gcp_credentials:
    external: true
  nats_user:
    external: true
  nats_password:
    external: true
  redis_password:
    external: true
